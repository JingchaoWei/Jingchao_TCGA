mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
rm(gene)
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
detach(data)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
gene <- rownames(exp)
#检查基因名是否存在于数据库
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
sum
sig <- sum[sum$p.value<0.05,]
sig.genes <- unique(sum$gene)
View(sig)
sig.genes
rm(list = ls())
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
detach(data)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(gene)
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
gene <- rownames(exp)
#检查基因名是否存在于数据库
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
sig <- sum[sum$p.value<0.05,]
sig.genes <- unique(sum$gene)
sig.genes
length(sig.genes)
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
load("PCa_TCGA.Rdata")
up_gene <- read.delim('Query_Genes.txt',stringsAsFactors = F)
up_gene <- up_gene$Up.[1:9]
library(survival)
library(survminer)
library(ggplot2)
library(gplots)
library(gridExtra)
#用median分组
MySurvival <- function(gene){
a <- isTRUE(gene %in% colnames(merge))
merge$append=ifelse(merge[[gene]]>median(merge[[gene]]),'big','small')
colnames(phe)
sfit <- survfit(Surv(OS.time, OS)~append, data=merge)
sfit
summary(sfit)
sfit_2 <- survfit(Surv(RFS.time, RFS)~append, data=merge)
sfit_2
summary(sfit_2)
oa <- ggsurvplot(sfit, conf.int=F, pval=TRUE,data = merge,
title=paste0("Overall Survival_",gene),combine = T)
rf <- ggsurvplot(sfit_2, conf.int=F, pval=TRUE,data = merge,
title=paste0("Recurrence/Disease Free Survival_",gene),combine = T)
arrange_ggsurvplots(x = list(oa,rf),title = gene,nrow = 1,ncol = 2)
print(paste0('Is ',gene,' in the dataset?  ',a))
survival_data <- merge[,c('OS.time','OS','RFS.time','RFS',gene)]
write.table(survival_data,file = paste0(gene,"_Survival_data.txt"),
quote = F,sep = "\t",row.names = F)
}
#sample type t test : gene is character
get_data <- function(gene){
whether_in <- isTRUE("sample_type" %in% colnames(phe))
print(paste0("Is sample_type in phe? :",whether_in))
data <- merge[,c('sample_type','sampleID',gene)]
table(data$sample_type)
data <- data[data$sample_type!='Metastatic',]
data$sample_type <- factor(data$sample_type)
write.table(data,file = paste0(gene,"_sample_type.txt"),quote = F,sep = "\t",row.names = F)
return(data)
}
#t test
MyTtest <- function(gene){
normal <- subset(data,subset = sample_type=="Solid Tissue Normal",select = gene)
normal <- normal[,1]
tumor <- subset(data,subset = sample_type=="Primary Tumor",select = gene)
tumor <- tumor[,1]
#var equal test
var(tumor)
var(normal)
var.test(tumor,normal)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(tumor,normal)$p.value>=0.05,"TRUE","FALSE")
print(paste0('Is var of two groups equal? :',tmp))
#t test
t.test(tumor,normal,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(tumor,normal,paired = F)$p.value
pvalue_ttest <- format(pvalue_ttest, scientific = FALSE)#不采用科学计数法
mean <- aggregate(data[[gene]],by=list(data$sample_type),FUN=mean)
sd <- aggregate(data[[gene]],by=list(data$sample_type),FUN=sd)
a <- ggplot(data=data,aes(x=sample_type,y=data[[gene]],fill=sample_type))+
geom_boxplot()+
ggtitle(gene)+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text",x= 1.5, y= 0, label = paste0('pvalue=',pvalue_ttest))
b <- ggplot(mean,aes(x=Group.1,y=x))+
geom_bar(stat = "identity",width = 0.3,position = position_dodge(0.7))+
geom_errorbar(aes(ymin=mean$x-sd$x,ymax=mean$x+sd$x),
width = 0.3,position = position_dodge(0.7))+
ggtitle(gene)+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text", x= 1.4, y= 0,label = paste0('pvalue=',pvalue_ttest))
c <- ggplot(data=data,aes(x=sample_type,y=data[[gene]],fill=sample_type))+
geom_dotplot(binaxis = "y",stackdir = "center",dotsize = 0.3)+
ggtitle(gene)+
theme(plot.title = element_text(hjust = 0.5))+
annotate("text", x= 1.5, y= 0,label = paste0('pvalue=',pvalue_ttest))
lay <- rbind(c(1,1,1,2,2),c(3,3,3,NA,NA))
grid.arrange(a,b,c,nrow = 2,ncol=2,name=gene,layout_matrix = lay)
}
rm(list = ls())
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
View(data)
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
View(group)
detach(data)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(gene)
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
gene <- rownames(exp)
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
View(phe)
sig <- sum[sum$p.value<0.05,]
sig.genes <- unique(sum$gene)
sig.genes
View(sum)
View(sig)
head(sig)
a <- 'RNF17'
sig$gene==a
head(sig)
sig[sig$gene==a,]
b <- sig[sig$gene==a,]
b
c <- b[b$type=='mean']
View(c)
c
c <- b[b$type=='mean',]
c
value_group1 <- subset(b,subset = b$type=='mean'&b$Group.1=='high',select = 'x')
value_group2 <- subset(b,subset = b$type=='mean'&b$Group.1=='low',select = 'x')
View(value_group1)
View(value_group2)
value_group1 <- subset(b,subset = b$type=='mean'&b$Group.1=='high',select = 'x')[1,1]
value_group2 <- subset(b,subset = b$type=='mean'&b$Group.1=='low',select = 'x')[1,1]
comparison <- ifelse(tmp > 0,'higher in Group_High','higher in Group_Low')
tmp <- value_groupHigh-value_groupLow
str(value_group1)
tmp <- as.numeric(value_groupHigh)-as.numeric(value_groupLow)
a <- 'RNF17'
b <- sig[sig$gene==a,]
value_groupHigh <- subset(b,subset = b$type=='mean'&b$Group.1=='high',select = 'x')[1,1]
value_groupLow <- subset(b,subset = b$type=='mean'&b$Group.1=='low',select = 'x')[1,1]
tmp <- as.numeric(value_groupHigh)-as.numeric(value_groupLow)
comparison <- ifelse(tmp > 0,'higher in Group_High','higher in Group_Low')
str(comparison)
c <- data.frame(gene=a,append=comparison)
View(c)
sig.genes
df <- data.frame(Date=as.Date(character()),
File=character(),
User=character(),
stringsAsFactors=FALSE)
View(df)
sig.genes_new <- data.frame(gene=character(),append=character(),stringsAsFactors = F)
View(sig.genes_new)
sig.genes <- sig.genes[1:5,]
sig.genes <- sig.genes[1:5]
sig.genes_new <- data.frame(gene=character(),append=character(),stringsAsFactors = F)
for (a in sig.genes) {
tmp <- MyComparison(a)
sig.genes_new <- rbind(sig.genes_new,tmp)
}
#figure out whether it's higher in Group.1 or Group.2 for each gene in sig.genes
MyComparison <- function(a){
b <- sig[sig$gene==a,]
value_groupHigh <- subset(b,subset = b$type=='mean'&b$Group.1=='high',select = 'x')[1,1]
value_groupLow <- subset(b,subset = b$type=='mean'&b$Group.1=='low',select = 'x')[1,1]
tmp <- as.numeric(value_groupHigh)-as.numeric(value_groupLow)
comparison <- ifelse(tmp > 0,'higher in Group_High','higher in Group_Low')
c <- data.frame(gene=a,append=comparison)
return(c)
}
for (a in sig.genes) {
tmp <- MyComparison(a)
sig.genes_new <- rbind(sig.genes_new,tmp)
}
sig.genes
sig.genes_new
a <- 'HIF3A'
b <- sig[sig$gene==a,]
View(b)
sig[sig$gene=='HIF3A',]
sig <- sum[sum$p.value<0.05,]
View(sig)
sig.genes <- unique(sum$gene)
sig.genes
which(sig$gene=='HIF3A')
which(sig.genes=='HIF3A')
sig.genes_new
str(sig)
str(sum)
sig <- sum[sum$p.value<0.05,]
sig.genes <- unique(sig$gene)
sig.genes
#figure out whether it's higher in Group.1 or Group.2 for each gene in sig.genes
MyComparison <- function(a){
b <- sig[sig$gene==a,]
value_groupHigh <- subset(b,subset = b$type=='mean'&b$Group.1=='high',select = 'x')[1,1]
value_groupLow <- subset(b,subset = b$type=='mean'&b$Group.1=='low',select = 'x')[1,1]
tmp <- as.numeric(value_groupHigh)-as.numeric(value_groupLow)
comparison <- ifelse(tmp > 0,'higher in Group_High','higher in Group_Low')
c <- data.frame(gene=a,append=comparison)
return(c)
}
sig.genes <- sig.genes[1:5]
sig.genes_new <- data.frame(gene=character(),append=character(),stringsAsFactors = F)
for (a in sig.genes) {
tmp <- MyComparison(a)
sig.genes_new <- rbind(sig.genes_new,tmp)
}
sig.genes_new
sig.genes <- unique(sig$gene)
sig.genes_new <- data.frame(gene=character(),append=character(),stringsAsFactors = F)
for (a in sig.genes) {
tmp <- MyComparison(a)
sig.genes_new <- rbind(sig.genes_new,tmp)
}
sig.genes_new
sig.genes_new <- sig.genes_new[order(sig.genes_new$append),]
sig.genes_new
View(sig.genes_new)
plot(sig.genes_new)
View(group)
save(sig.genes_new,sig.genes,sum,group,file = 'Sig.genes.Rdata')
load('Sig.genes.Rdata')
load('Sig.genes.Rdata')
View(sig.genes_new)
View(sig.genes_new)
cat(sig.genes_new$gene,sep = '\n')
head(sig.genes_new$gene,50)
head(sig.genes_new$gene,50,sep='\n')
load("PCa_TCGA.Rdata")
up_gene <- read.delim('Query_Genes.txt',stringsAsFactors = F)
up_gene <- up_gene$Up.[1:9]
library(survival)
library(survminer)
library(ggplot2)
library(gplots)
library(gridExtra)
#分四组
a <- quantile(merge$NT5E)
merge$append <- ifelse(merge$NT5E<a[2],'NT5E:lowest',
ifelse(merge$NT5E<a[3],'NT5E:lower',
ifelse(merge$NT5E<a[4],'NT5E:higher','NT5E:higheset')))
su <- Surv(merge$OS.time,merge$OS)
sfit <- survfit(su~append, data=merge)
sfit
summary(sfit)
su2 <- Surv(merge$RFS.time,merge$RFS)
sfit_2 <- survfit(su2~append, data=merge)
sfit_2
summary(sfit_2)
oa <- ggsurvplot(sfit, conf.int=F, pval=TRUE,data = merge,
title='Overall Survival',combine = T)
rf <- ggsurvplot(sfit_2, conf.int=F, pval=TRUE,data = merge,
title="Recurrence/Disease Free Survival",combine = T)
arrange_ggsurvplots(x = list(oa,rf),title = gene,nrow = 1,ncol = 2)
print(paste0('Is ',gene,' in the dataset?  ',a))
survival_data <- merge[,c('OS.time','OS','RFS.time','RFS',gene)]
write.table(survival_data,file = paste0(gene,"_Survival_data.txt"),
quote = F,sep = "\t",row.names = F)
arrange_ggsurvplots(x = list(oa,rf),title = 'gene',nrow = 1,ncol = 2)
library(RTCGAToolbox)
valid_aliases <- getFirehoseDatasets()
valid_aliases
stddate <- getFirehoseRunningDates()
stddate
gisticDate <- getFirehoseAnalyzeDates()
gisticDate
brcaData <- getFirehoseData (dataset="BRCA", runDate="20140416",
gistic2Date="20140115", clinic=TRUE, RNAseqGene=TRUE, mRNAArray=TRUE,
Mutation=TRUE)
save(sig.genes_new,sig.genes,sum,group,group,file = 'Sig.genes.Rdata')
load('Sig.genes.Rdata')
load('Sig.genes.Rdata')
save(sig.genes_new,sig.genes,sum,group,file = 'Sig.genes.Rdata')
load('Sig.genes.Rdata')
View(group)
load('PCa_TCGA.Rdata')
View(phe)
colnames(phe)
colnames(sig.genes_new)
phe_group <- merge(phe,sig.genes_new,by.x = 'sampleID', by.y = 'gene',all=F)
View(phe_group)
phe_group <- merge(phe,group,by= 'sampleID',all=F)
View(phe_group)
phe_group <- merge(group,phe,by= 'sampleID',all=F)
View(phe_group)
phe_group <- phe_group[order(phe_group$group),]
str(phe_group)
phe_group <- merge(group,phe,by= 'sampleID',all=F)
group_low <- phe_group[phe_group$group=='low',]
group_high <- phe_group[phe_group$group=='high',]
View(group_high)
colnames(group_low)
table(group_high$gleason_score)
table(group_low$gleason_score)
read.csv('test.csv')
data <- read.csv('test.csv')
head(data)
data <- data[,-1]
library(Hmisc)
res <- rcorr(as.matrix(data),)
library(pheatmap)
pheatmap(res$r,
col = colorRampPalette(c("blue","white","red"))(100),
cluster_rows = F,cluster_cols=F,
display_numbers = T,number_color = 'black',fontsize_number = 10,
border_color = NA,legend=TRUE,
show_colnames=T,show_rownames=T,
fontsize_col = 10,
fontsize_row = 10,fontsize = 10,
main = 'Correlation')
