gene <- rownames(exp)
gene <- gene[1]
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
tmp <- rbind(mean,sd)
tmp$gene <- rep(gene,4)
tmp$p.value <- rep(pvalue_ttest,4)
}
for (j in gene) {
MyTtest(j)
result <- rbind(result,tmp)
}
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
tmp <- rbind(mean,sd)
tmp$gene <- rep(gene,4)
tmp$p.value <- rep(pvalue_ttest,4)
result <- rbind(result,tmp)
}
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
tmp <- rbind(mean,sd)
tmp$gene <- rep(gene,4)
tmp$p.value <- rep(pvalue_ttest,4)
result <- rbind(result,tmp)
return(result)
}
MyTtest('NT5E')
rm(result)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
MyTtest('NT5E')
gene <- rownames(exp)
gene <- gene[1:5]
gene <- rownames(exp)
gene <- gene[1:5]
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames(merge))
istrue <- c(istrue,findit)
}
unique(istrue)
result2 <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
MyTtest('NT5E')
for (j in gene) {
MyTtest(j)
result2 <- rbind(result,result2)
}
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
View(sum)
colnames <- colnames(merge)
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
detach(data)
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
detach(data)
library(ggplot2)
library(gplots)
library(gridExtra)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
gene <- rownames(exp)
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[1:10]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
View(sum)
rm(sum)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[1:10]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
rm(sum)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
#t test
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[1:100]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[1:10]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
View(sum)
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
gene[10:50]
merge[gene[10:50],]
merge[,gene[10:50]]
merge[,gene[10:50]] -> a
a
View(a)
a$RBMY1A3P
gene <- 'RBMY1A3P'
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
View(data1)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
var.test(group1,group2)#看方差是否相等，这里p<0.05, 表示方差不等，下面的var.equal要设为FALSE
#var equal test
var(group1)
var(group2)
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
gene <- 'NT5E'
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
abc <- MyTtest(gene)
View(abc)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
print(result)
}
}
MyTtest(gene)
gene <- 'RBMY1A3P'
MyTtest(gene)
gene <- 'TP53'
MyTtest(gene)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
rm(gene)
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
# Thu Nov 08 15:13:40 2018 ------------------------------
rm(list = ls())
load('PCa_TCGA.Rdata')
marker <- c('ADRA1A','CXCL12','PPP1R1A')
data <- merge[,c('sampleID',marker)]
attach(data)
high_group <- subset(data,
subset = ADRA1A>median(ADRA1A) & CXCL12>median(CXCL12) &
PPP1R1A>median(PPP1R1A),select = 1)
high_group$group <- rep('high',139)
low_group <- subset(data,
subset = ADRA1A<=median(ADRA1A) & CXCL12<=median(CXCL12) &
PPP1R1A<=median(PPP1R1A),select = 1)
low_group$group <- rep('low',136)
group <- rbind(high_group,low_group)
detach(data)
#t test
MyTtest <- function(gene){
data1 <- merge[match(group$sampleID,merge$sampleID),c('sampleID',gene)]
data1 <- merge(data1,group,by='sampleID',all=F)
group1 <- subset(data1,subset = data1$group=='high',select = gene)[[gene]]
group2 <- subset(data1,subset = data1$group=='low',select = gene)[[gene]]
#var equal test
var(group1)
var(group2)
if (var(group1)==0&var(group2)==0) {
print(paste0(gene,' is 0 for all'))
} else{
var.test(group1,group2)
tmp <- ifelse(var.test(group1,group2)$p.value>=0.05,"TRUE","FALSE")
t.test(group1,group2,paired = F,var.equal = as.logical(tmp))
pvalue_ttest <- t.test(group1,group2,paired = F)$p.value
mean <- aggregate(data1[[gene]],by=list(data1$group),FUN=mean)
mean$type <- rep('mean',2)
sd <- aggregate(data1[[gene]],by=list(data1$group),FUN=sd)
sd$type <- rep('sd',2)
result <- rbind(mean,sd)
result$gene <- rep(gene,4)
result$p.value <- rep(pvalue_ttest,4)
return(result)
}
}
gene <- rownames(exp)
#检查基因名是否存在于数据库
colnames <- colnames(merge)
istrue <- vector()
for (i in gene) {
findit <- isTRUE(i %in% colnames)
istrue <- c(istrue,findit)
}
unique(istrue)
#利用循环，将每个基因的结果汇总
sum <- data.frame(Group.1=character(),
x=numeric(),
type=character(),
gene=character(),
p.value=numeric())
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
for (j in gene[10:50]) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
for (j in gene) {
tmp <- MyTtest(j)
sum <- rbind(sum,tmp)
}
sum
sum
sig <- sum[sum$p.value<0.05,]
sig.genes <- unique(sum$gene)
View(sig)
sig.genes
